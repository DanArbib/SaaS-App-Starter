services:

  # Postgres
  pg:
    hostname: pg
    image: postgres:16.3-alpine3.20
    env_file:
      - ./.env
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGDATA=${PGDATA}
    networks:
      - db-net
    volumes:
      - postgress_db:/var/lib/postgresql/data/db-files/
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U flask_app" ]
      interval: 5s
      timeout: 5s
      retries: 5

  # Postgres admin tool  
  pgadmin:
    image: dpage/pgadmin4
    env_file:
      - ./.env
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION=True
      - PGADMIN_CONFIG_CONSOLE_LOG_LEVEL=10
    depends_on:
      - pg
    restart: always
    volumes:
      - pgdamin-data:/var/lib/pgadmin
    networks:
      - db-net
    ports:
      - "5433:80"

  # Api  
  api:
    hostname: api
    build:
      context: .
      dockerfile: ./api/Dockerfile.api
    volumes:
      - ./logs:/app/app/logs
    env_file:
      - ./.env
    depends_on:
      rabbit:
        condition: service_started
      pg:
        condition: service_healthy
    networks:
      - app-net
      - db-net
      - monitor-net
    restart: always

  # App-Nginx  
  app:
    hostname: app
    # image: app:latest
    build:
      context: .
      dockerfile: ./app/Dockerfile.app
    # depends_on:
    #   - api
    networks:
      - app-net
      - grafana-net
    restart: always
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
      - "3000:3000"

  # Promtail  
  promtail:
    hostname: promtail
    image: grafana/promtail:2.4.0
    volumes:
      - ./logs:/var/log/
      - ./config/promtail/promtail-config.yaml:/etc/promtail/config.yaml
    restart: unless-stopped
    networks:
      - log-net

  # Loki  
  loki:
    hostname: loki
    image: grafana/loki:2.9.6
    volumes:
      - loki_data:/etc/loki
      - ./config/loki/loki-config.yaml:/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - log-net

  # Grafana  
  grafana:
    hostname: grafana
    image: grafana/grafana:11.0.0
    env_file:
      - ./.env
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/grafana-dashboard.json
    volumes:
    - grafana_data:/var/lib/grafana
    - ./config/grafana/datasource.yaml:/etc/grafana/provisioning/datasources/default.yaml
    - ./config/grafana/dashboard.yaml:/etc/grafana/provisioning/dashboards/default.yaml
    - ./config/grafana/grafana-dashboard.json:/var/lib/grafana/dashboards/grafana-dashboard.json
    restart: unless-stopped
    networks:
      - log-net
      - grafana-net

  # Prometheus  
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./config/prometheus/prometheus-config.yaml:/etc/prometheus/prometheus.yml
    networks:
      - log-net
      - monitor-net

  # Redis  
  redis:
    hostname: redis
    image: "redis:7.0.15-alpine"
    restart: always
    networks:
      - redis_net
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3

  # RabbitMQ  
  rabbit:
    hostname: rabbit
    image: "rabbitmq:3.13.3"
    restart: always
    networks:
      - redis_net
      - app-net
    env_file:
      - ./.env
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    depends_on:
      redis:
        condition: service_healthy
    command: >
      sh -c '
        rabbitmq-plugins enable rabbitmq_management;
        rabbitmq-server
      '

  # Node exporter   
  exporter:
    image: prom/node-exporter:latest
    container_name: exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($$|/)"'
    networks:
      - monitor-net

volumes:
  postgress_db:
  loki_data:
  grafana_data:
  pgdamin-data:

networks:
  app-net:
  db-net:
  log-net:
  monitor-net:
  grafana-net:
  redis_net:
